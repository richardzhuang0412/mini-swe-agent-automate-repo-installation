agent:
  system_template: |
    You are a helpful assistant that can interact with a computer and generate Dockerfiles.

    Your response must contain exactly ONE bash code block with ONE command (or commands connected with && or ||).
    Include a THOUGHT section before your command where you explain your reasoning process.
    Format your response as shown in <format_example>.

    <format_example>
    Your reasoning and analysis here. Explain why you want to perform the action.

    ```bash
    your_command_here
    ```
    </format_example>

    Failure to follow these rules will cause your response to be rejected.
  instance_template: |
    Please create a Dockerfile for this GitHub repository: {{task}}

    Your goal is to analyze the repository, determine how to install dependencies and run tests, then generate a complete Dockerfile.

    ## Recommended Workflow

    1. Clone the repository using git clone under the agent-result/$repo_folder_name/cloned_repo directory (repo_folder_name = task.replace("/", "-"))
    2. Analyze the codebase structure and identify the programming language/framework
    3. Look for package management files (package.json, requirements.txt, Cargo.toml, etc.)
    4. Determine the appropriate base Docker image
    5. Figure out the installation and test commands
    6. Create a Dockerfile in the agent-result/$repo_folder_name directory with:
       - Appropriate base image
       - Git clone of the repository
       - Dependency installation
       - Test execution to verify the build (use verbose mode for detailed test output)
       - Proper working directory and entrypoint
    7. Create a test_commands.json file in the agent-result/$repo_folder_name directory containing:
       - test_command: The specific test command used in verbose mode (e.g., "npm test -- --verbose", "pytest -v", "cargo test -- --nocapture")
       - test_framework: The detected test framework (e.g., "jest", "mocha", "pytest", "go_test", "cargo", "maven")
          - If unable to determine the test framework, set it to "unknown"
       - language: The programming language (e.g., "javascript", "python", "go", "rust", "java")
    8. Remove the cloned repository directory to save space (e.g., `rm -rf agent-result/$repo_folder_name`).

    ## Important Guidelines

    - Use `git clone https://github.com/{{task}}.git` instead of COPY commands
    - Choose minimal base images when possible (e.g., node:18-slim, python:3.11-slim), but make sure the version is supported by the repository
    - Install only necessary system dependencies
    - Create the Dockerfile in agent-result/$repo_folder_name directory
    - Make sure the final container can be used for development or CI/CD
    - Always use verbose mode for test commands to show detailed test output and low-level details

    ## Important Rules

    1. Every response must contain exactly one action
    2. The action must be enclosed in triple backticks
    3. Directory or environment variable changes are not persistent. Every action is executed in a new subshell.
       However, you can prefix any action with `MY_ENV_VAR=MY_VALUE cd /path/to/working/dir && ...` or write/load environment variables from files
    4. When you have created a working Dockerfile, finish your work by issuing: `echo COMPLETE_TASK_AND_SUBMIT_FINAL_OUTPUT`

    <system_information>
    {{system}} {{release}} {{version}} {{machine}} {{processor}}
    </system_information>

    ## Formatting your response

    Here is an example of a correct response:

    <example_response>
    THOUGHT: I need to clone the repository first to understand its structure and dependencies.

    ```bash
    git clone https://github.com/expressjs/express.git agent-result/expressjs-express/cloned_repo
    ```
    </example_response>

    ## Useful command examples

    ### Create a new file:

    ```bash
    cat <<'EOF' > agent-result/expressjs-express/Dockerfile
    FROM node:18-slim
    WORKDIR /app
    RUN git clone https://github.com/expressjs/express.git .
    RUN npm install
    RUN npm test -- --verbose
    CMD ["/bin/bash"]
    EOF
    ```

    ### Create test commands file:

    ```bash
    cat <<'EOF' > agent-result/expressjs-express/test_commands.json
    {
      "test_command": "npm test -- --verbose",
      "test_framework": "mocha", 
      "language": "javascript"
    }
    EOF
    ```

    ### Edit files with sed:

    {%- if system == "Darwin" -%}
    <important>
    You are on MacOS. For all the below examples, you need to use `sed -i ''` instead of `sed -i`.
    </important>
    {%- endif -%}

    ```bash
    # Replace all occurrences
    sed -i 's/old_string/new_string/g' filename.py

    # Replace only first occurrence
    sed -i 's/old_string/new_string/' filename.py

    # Replace first occurrence on line 1
    sed -i '1s/old_string/new_string/' filename.py

    # Replace all occurrences in lines 1-10
    sed -i '1,10s/old_string/new_string/g' filename.py
    ```

    ### View file content:

    ```bash
    # View specific lines with numbers
    nl -ba filename.py | sed -n '10,20p'
    ```

    ### Any other command you want to run

    ```bash
    anything
    ```
  action_observation_template: |
    <returncode>{{output.returncode}}</returncode>
    {% if output.output | length < 50000 -%}
    <output>
    {{ output.output -}}
    </output>
    {%- else -%}
    <warning>
    The output of your last command was very long ({{output.output | length}} characters).
    Please try a different command that produces less output if possible.
    If you're looking at a file you can try use head, tail or sed to view a smaller number of lines selectively.
    If you're using grep or find and it produced too much output, you can use a more selective search pattern.
    If you really need to see something from the full command's output, you can redirect output to a file and then search in that file.
    </warning>
    {%- set elided_chars = output.output | length - 50000 -%}
    <output_head>
    {{ output.output[:25000] }}
    </output_head>
    <elided_chars>
    {{ elided_chars }} characters elided
    </elided_chars>
    <output_tail>
    {{ output.output[-25000:] }}
    </output_tail>
    {%- endif -%}
  format_error_template: |
    Please always provide EXACTLY ONE action in triple backticks, found {{actions|length}} actions.
    If you want to end the task, please issue the following command: `echo COMPLETE_TASK_AND_SUBMIT_FINAL_OUTPUT`
    without any other command.
    Else, please format your response exactly as follows:

    <response_example>
    Here are some thoughts about why you want to perform the action.

    ```bash
    <action>
    ```
    </response_example>

    Note: In rare cases, if you need to reference a similar format in your command, you might have
    to proceed in two steps, first writing TRIPLEBACKTICKSBASH, then replacing them with ```bash.
  step_limit: 0.
  cost_limit: 0.
environment:
  env:
    PAGER: cat
    MANPAGER: cat
    LESS: -R
    PIP_PROGRESS_BAR: 'off'
    TQDM_DISABLE: '1'
model:
  model_kwargs:
    temperature: 0.0
    drop_params: true